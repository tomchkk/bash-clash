#!/usr/bin/env bash

# TODO: add handles to args
bash_clash_args=()
bash_clash_all=()
bash_clash_switches=()
bash_clash_positionals=()

##
# Gets the given variable value from the bash_clash_switches array, returning
# a default value if the variable is not found.
##
bash_clash::get() {
    local name="${1:?"A parameter name to get is required"}"
    local default="$2"
    local value

    for switch in ${bash_clash_switches[*]}; do
        if [[ "$switch" =~ ^"$name"=(.*) ]]; then
            value="${BASH_REMATCH[1]}" && break
        fi
    done

    echo "${value:-$default}"
}

##
# Normalises the given argument handle to make it declarable - e.g.:
# "--arg-name" -> "arg_name"
##
__bash_clash::normalise_handle() {
    echo "$1" | sed -E 's/^--|^-//;s/-/_/g'
}

##
# Adds a new element to the switches array.
##
__bash_clash::switches_add() {
    local arg="$1=$2"
    local element="$(__bash_clash::normalise_handle "$1")="$2""

    bash_clash_args+=("$arg")
    bash_clash_all+=("$element")
    bash_clash_switches+=("$element")
}

##
# Adds a new element to the positionals array.
##
__bash_clash::positionals_add() {
    bash_clash_args+=("$1")
    bash_clash_all+=("$1")
    bash_clash_positionals+=("$1")
}

##
# Updates the head of the _args_ and the _all_ arrays.
##
__bash_clash::all_update() {
    local head=$((${#bash_clash_args[@]} - 1))

    bash_clash_args[$head]="${bash_clash_args[$head]} $1"
    bash_clash_all[$head]="${bash_clash_all[$head]} $1"
}

##
# Updates the head of the switches array.
##
__bash_clash::switches_update() {
    local head=$((${#bash_clash_switches[@]} - 1))

    bash_clash_switches[$head]="${bash_clash_switches[$head]} $1"
    __bash_clash::all_update $1
}

##
# Updates the head of the positionals array.
##
__bash_clash::positionals_update() {
    local head=$((${#bash_clash_positionals[@]} - 1))

    bash_clash_positionals[$head]="${bash_clash_positionals[$head]} $1"
    __bash_clash::all_update $1
}

##
# Parse given arguments into variables with in the context of the current shell
# process.
##
__bash_clash::parse_arguments() {
    local switch_open=false
    local positional_open=false
    local switch
    local value

    while [[ $# > 0 ]]; do
        if [[ "$1" =~ ^-(-$|-?[a-zA-Z0-9]+) ]]; then
            if [[ "$1" =~ ^--$ ]]; then
                # $1 is argument separator '--'; we just continue
                switch_open=false
                positional_open=false
            else
                # here be switches and flags!
                switch_open=true

                if [[ "$1" =~ ^--?(.+)=(.*)$ ]]; then
                    # this switch is 'joined' - e.g.: --switch=value
                    switch="${BASH_REMATCH[1]}" && value="${BASH_REMATCH[2]}"
                elif [[ "$2" =~ ^--?[a-zA-Z0-9]+ ]] || [[ -z "$2" ]]; then
                    # $2 is a new option handle, or we've reached the end of the
                    # argument list, so $1 must be a flag, which means it is
                    # 'truthy' - therefore we'll give it a value of true!
                    switch="$1" && value=true
                else
                    # $2 is the value of the switch indicated by $1
                    switch="$1" && value="$2"

                    shift # consume one additional argument
                fi

                __bash_clash::switches_add $switch $value
            fi
        else
            if $switch_open; then
                # we're still parsing the last switch, it has space-separated values
                __bash_clash::switches_update $1
            elif $positional_open; then
                # we're still parsing the last positionals set, it has space-separated values
                __bash_clash::positionals_update $1
            else
                __bash_clash::positionals_add $1

                positional_open=true
            fi
        fi

        shift
    done
}

case "$1" in
    --declare)
        __bash_clash::parse_arguments ${@:2}

        if [[ "${#bash_clash_switches[@]}" -gt 0 ]]; then
            declare "${bash_clash_switches[@]}"
        fi
    ;;
    *)
        __bash_clash::parse_arguments $@
    ;;
esac
